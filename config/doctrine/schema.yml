# TOA Berlin database schema, maciej@canadel.ee
#
#  INFO:
#  - If the event has paid tickets, and the user already bought the main ticket, only the free tickets should be displayed
#    (dig around their API); probably do some user flag sayign "main ticket bought"
#
#  TODO:
#  - Check how the fuck to add float with more spaces after coma FOR FUCKS SAKE
#
#  LATER:
#  - Optimize certain defined values basing on real world examples
#  - Add optimizations as notnulls, primary keys, indexes, etc.
options:
  charset:            UTF8
  type:               innodb

Category:
  columns:
    name:
      type: string(64)
  relations:
    Events:
      class:            Event
      local:            id
      foreign:          category_id
      type:             many

#Venue:
#  columns:
#    name:
#      type: string(64)
#    address:
#      type: string(128)
#    city:
#      type: string(32)
#    postal_code:
#      type: integer(6)
#    longitude:
#      type: float(3,6)
#      type: float
#    latitude:
#      type: float(3,6)
#      type: float

#    eventbrite_id:
#      type: integer(16)

#   region:
#     type: string(16)
#   address2:
#     type: string(128)
#   country:
#     type: string(64)
#   country_code:
#     type: string(3)

#  relations:
#    Events:
#      class:            Event
#      local:            id
#      foreign:          venue_id
#      type:             many
#      foreignType:      one
#      foreignAlias:     Venue

Organiser:
  columns:
    user_id:
      type: integer
    name:
      type: string(64)
    description:
      type: string(256)
    url:
      type: string(128)

    eventbrite_id:
      type: integer(16)

  relations:
    Events:             # LATER: think of making it one-to-one with Event!
      class:    Event
      local:    id
      foreign:  organiser_id
      type:     many
    GuardUser:
      class:    sfGuardUser
      local:    user_id
      foreign:  id
      type:     one
      foreignType: one

#EventTicket:
#  columns:
#    event_id:
#      type: integer
#      primary: true
#    ticket_id:
#      type: integer
#      primary: true

Ticket:
  columns:
    event_id:
      type: integer
      notnull: true
    name:
      type: string(64)
    description:
      type: string(256)
    price:
      type: float(4,2)
    quantity_declared:
      type: integer(5)
    quantity_paid:
      type: integer(5)
    quantity_free:
      type: integer(5)

    eventbrite_id:
      type: integer(16)

#    currency:                  ** always in EUR, remember to push to API though
#      type: string(3)
#    visible:
#      type: boolean
#      default: false
#    max:
#      type: integer(5)
#    min:
#      type: integer(5)
#    start_date:
#      type: timestamp
#    end_date:
#      type: timestamp
#    type:
#      type: integer(1) 

  relations:
    Event:
      local:            event_id
      foreign:          id
      type:             one
      foreignType:      many
      foreignAlias:     Tickets
#  relations:
#    Events:
#      class:            Event
#      refClass:         EventTicket
#      foreignAlias:     Events

Attendee:
  columns:
    user_id:
      type: integer
    event_id:
      type: integer
    confirmed:
      type: boolean
      default: true # experimental
  relations:
    sfGuardUser:
      local: user_id
      foreign: id
      foreignAlias: Attendees
    Event:
      local: event_id
      foreign: id
      foreignAlias: Attendees

Event:
  actAs:
    Timestampable: ~
  columns:
    category_id:
      type: integer
      notnull: true
    organiser_id:
      type: integer
      notnull: true
    title:
      type: string(64)
      notnull: true
    description:
      type: string(512)
      notnull: true
    start_date:
      type: timestamp
    end_date:
      type: timestamp
    start_hour:
      type: time
      notnull: true
    end_hour:
      type: time
      notnull: true
    logo:
      type: string(128)
    listing_color:
      type: string(8)

    moderated:
      type: boolean
      default: false

    venue_name:
      type: string(64)
    venue_address:
      type: string(128)
      notnull: true
    venue_city:
      type: string(32)
      notnull: true
    venue_postal_code:
      type: integer(6)
    venue_latitude:
      type: float  # TODO: try forcing more stuff after coma
    venue_longitude:
      type: float  # TODO: ^^
    venue_eventbrite_id:
      type: integer(16)

    eventbrite_id:
      type: integer(16)
    eventbrite_logo_url:
      type: string(128)
    eventbrite_created:
      type: timestamp
    eventbrite_modified:
      type: timestamp

#    venue_id:
#      type: integer
#      notnull: true
#    timezone:
#      type: string(32)
#    url:
#      type: string(128)
#    capacity:
#      type: integer(4)
#    privacy:
#      type: string(16)
#    logo_ssl:
#      type: string(128)
#    status:
#      type: string(16)
#    password:
#      type: string(160)

#  relations:
#    Tickets:
#      class:            Ticket
#      refClass:         EventTicket
#      foreignAlias:     Tickets

#  relations:
#    Tickets:
#      class:            Ticket
#      local:            id
#      foreign:          ticket_id
#      type:             many
#      foreignType:      one
#      foreignAlias:     Event
