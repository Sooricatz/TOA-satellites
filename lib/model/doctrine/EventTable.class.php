<?php

/**
 * EventTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EventTable extends Doctrine_Table {

	public static function getInstance() { return Doctrine_Core::getTable('Event'); }

	public function getEventsForPage($page = 0) {

		if($page == 0) {

			$events = $this->createQuery('a')
			->orderBy('start_date')
			->execute();
		}
		else {

			// TODO: calculate referal hour from $page variable

			$sql = 'SELECT * FROM event e WHERE e.start_date <= ADDDATE(e.start_date, INTERVAL 3 HOUR)';
	/*
			$date_start = $page * 

			$events = $this->createQuery('a')
			->
	*/
		}

		return $events;
	}

	// user-to-event getters
	public function getForUser(sfUser $user) {

		// fallback fix for users not having Organiser profiles
		return $user->getGuardUser()->getOrganiser() ? $user->getGuardUser()->getOrganiser()->getEvents() : array();
	}
	public function getAPIForUser(sfUser $user) {

		return $user->getMelody('eventbrite')->getEventsForUser($user->getGuardUser()->getEmailAddress());
	}
	public function getAPIUnhostedForUser(sfUser $user) {

		// fetch stuff from API
		$eventsAPI = $this->getAPIForUser($user);

		// 1a. check if user has anything in the API
		if($eventsAPI and is_array($eventsAPI) and isset($eventsAPI['events']) and count($eventsAPI['events'])) {

			// fetch stuff from local DB
			$eventsDB = $this->getForUser($user);

			// 2. check if the user has any events hosted in our database
			if($eventsDB and count($eventsDB)) {

				// 3a. rule out duplicates
				$output = $eventsAPI['events'];

				// LATER: adjust it as probably massive-iterating the API response would be faster than iterating the Doctrine_Collection
				foreach($output as $keyAPI => $eventAPI) {

					// LATER: think if a better way for searching in Doctrine_Collection
					// http://www.tig12.net/downloads/apidocs/symfony/lib/plugins/sfDoctrinePlugin/lib/vendor/doctrine/Doctrine/Doctrine_Collection.class.html
					foreach($eventsDB as $eventDB) {

						if($eventAPI['event']['id'] == $eventDB->getEventbriteId()) unset($output[$keyAPI]);
					}
				}

				return $output;
			}

			// 3b. return all of the API events
			else return $eventsAPI['events'];
		}

		// 1b. return false
		else return false;
	}
}
