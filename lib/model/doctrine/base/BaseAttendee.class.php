<?php

/**
 * BaseAttendee
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $user_id
 * @property integer $event_id
 * @property boolean $confirmed
 * @property sfGuardUser $sfGuardUser
 * @property Event $Event
 * 
 * @method integer     getUserId()      Returns the current record's "user_id" value
 * @method integer     getEventId()     Returns the current record's "event_id" value
 * @method boolean     getConfirmed()   Returns the current record's "confirmed" value
 * @method sfGuardUser getSfGuardUser() Returns the current record's "sfGuardUser" value
 * @method Event       getEvent()       Returns the current record's "Event" value
 * @method Attendee    setUserId()      Sets the current record's "user_id" value
 * @method Attendee    setEventId()     Sets the current record's "event_id" value
 * @method Attendee    setConfirmed()   Sets the current record's "confirmed" value
 * @method Attendee    setSfGuardUser() Sets the current record's "sfGuardUser" value
 * @method Attendee    setEvent()       Sets the current record's "Event" value
 * 
 * @package    toaberlin
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseAttendee extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('attendee');
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('event_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('confirmed', 'boolean', null, array(
             'type' => 'boolean',
             'default' => true,
             ));

        $this->option('charset', 'UTF8');
        $this->option('type', 'innodb');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('sfGuardUser', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        $this->hasOne('Event', array(
             'local' => 'event_id',
             'foreign' => 'id'));
    }
}