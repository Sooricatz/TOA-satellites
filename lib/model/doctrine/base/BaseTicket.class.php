<?php

/**
 * BaseTicket
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $eventbrite_id
 * @property integer $type
 * @property string $currency
 * @property float $price
 * @property integer $max
 * @property integer $min
 * @property timestamp $start_date
 * @property timestamp $end_date
 * @property integer $quantity_available
 * @property integer $quantity_sold
 * @property boolean $visible
 * @property Doctrine_Collection $Events
 * 
 * @method integer             getEventbriteId()       Returns the current record's "eventbrite_id" value
 * @method integer             getType()               Returns the current record's "type" value
 * @method string              getCurrency()           Returns the current record's "currency" value
 * @method float               getPrice()              Returns the current record's "price" value
 * @method integer             getMax()                Returns the current record's "max" value
 * @method integer             getMin()                Returns the current record's "min" value
 * @method timestamp           getStartDate()          Returns the current record's "start_date" value
 * @method timestamp           getEndDate()            Returns the current record's "end_date" value
 * @method integer             getQuantityAvailable()  Returns the current record's "quantity_available" value
 * @method integer             getQuantitySold()       Returns the current record's "quantity_sold" value
 * @method boolean             getVisible()            Returns the current record's "visible" value
 * @method Doctrine_Collection getEvents()             Returns the current record's "Events" collection
 * @method Ticket              setEventbriteId()       Sets the current record's "eventbrite_id" value
 * @method Ticket              setType()               Sets the current record's "type" value
 * @method Ticket              setCurrency()           Sets the current record's "currency" value
 * @method Ticket              setPrice()              Sets the current record's "price" value
 * @method Ticket              setMax()                Sets the current record's "max" value
 * @method Ticket              setMin()                Sets the current record's "min" value
 * @method Ticket              setStartDate()          Sets the current record's "start_date" value
 * @method Ticket              setEndDate()            Sets the current record's "end_date" value
 * @method Ticket              setQuantityAvailable()  Sets the current record's "quantity_available" value
 * @method Ticket              setQuantitySold()       Sets the current record's "quantity_sold" value
 * @method Ticket              setVisible()            Sets the current record's "visible" value
 * @method Ticket              setEvents()             Sets the current record's "Events" collection
 * 
 * @package    toaberlin
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTicket extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('ticket');
        $this->hasColumn('eventbrite_id', 'integer', 12, array(
             'type' => 'integer',
             'length' => 12,
             ));
        $this->hasColumn('type', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             ));
        $this->hasColumn('currency', 'string', 3, array(
             'type' => 'string',
             'length' => 3,
             ));
        $this->hasColumn('price', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('max', 'integer', 5, array(
             'type' => 'integer',
             'length' => 5,
             ));
        $this->hasColumn('min', 'integer', 5, array(
             'type' => 'integer',
             'length' => 5,
             ));
        $this->hasColumn('start_date', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('end_date', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('quantity_available', 'integer', 5, array(
             'type' => 'integer',
             'length' => 5,
             ));
        $this->hasColumn('quantity_sold', 'integer', 5, array(
             'type' => 'integer',
             'length' => 5,
             ));
        $this->hasColumn('visible', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));

        $this->option('charset', 'UTF8');
        $this->option('type', 'innodb');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Event as Events', array(
             'refClass' => 'EventTicket',
             'local' => 'ticket_id',
             'foreign' => 'event_id'));
    }
}