<?php

/**
 * BaseEvent
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $category_id
 * @property integer $eventbrite_id
 * @property integer $venue_id
 * @property integer $organiser_id
 * @property string $title
 * @property string $description
 * @property timestamp $start_date
 * @property timestamp $end_date
 * @property string $timezone
 * @property string $url
 * @property integer $capacity
 * @property timestamp $created
 * @property timestamp $eventbrite_modified
 * @property string $privacy
 * @property string $password
 * @property string $logo
 * @property string $logo_ssl
 * @property string $status
 * @property boolean $moderated
 * @property string $listing_color
 * @property Doctrine_Collection $Tickets
 * @property Category $Category
 * @property Venue $Venue
 * @property Organiser $Organiser
 * @property Doctrine_Collection $Attendees
 * 
 * @method integer             getCategoryId()          Returns the current record's "category_id" value
 * @method integer             getEventbriteId()        Returns the current record's "eventbrite_id" value
 * @method integer             getVenueId()             Returns the current record's "venue_id" value
 * @method integer             getOrganiserId()         Returns the current record's "organiser_id" value
 * @method string              getTitle()               Returns the current record's "title" value
 * @method string              getDescription()         Returns the current record's "description" value
 * @method timestamp           getStartDate()           Returns the current record's "start_date" value
 * @method timestamp           getEndDate()             Returns the current record's "end_date" value
 * @method string              getTimezone()            Returns the current record's "timezone" value
 * @method string              getUrl()                 Returns the current record's "url" value
 * @method integer             getCapacity()            Returns the current record's "capacity" value
 * @method timestamp           getCreated()             Returns the current record's "created" value
 * @method timestamp           getEventbriteModified()  Returns the current record's "eventbrite_modified" value
 * @method string              getPrivacy()             Returns the current record's "privacy" value
 * @method string              getPassword()            Returns the current record's "password" value
 * @method string              getLogo()                Returns the current record's "logo" value
 * @method string              getLogoSsl()             Returns the current record's "logo_ssl" value
 * @method string              getStatus()              Returns the current record's "status" value
 * @method boolean             getModerated()           Returns the current record's "moderated" value
 * @method string              getListingColor()        Returns the current record's "listing_color" value
 * @method Doctrine_Collection getTickets()             Returns the current record's "Tickets" collection
 * @method Category            getCategory()            Returns the current record's "Category" value
 * @method Venue               getVenue()               Returns the current record's "Venue" value
 * @method Organiser           getOrganiser()           Returns the current record's "Organiser" value
 * @method Doctrine_Collection getAttendees()           Returns the current record's "Attendees" collection
 * @method Event               setCategoryId()          Sets the current record's "category_id" value
 * @method Event               setEventbriteId()        Sets the current record's "eventbrite_id" value
 * @method Event               setVenueId()             Sets the current record's "venue_id" value
 * @method Event               setOrganiserId()         Sets the current record's "organiser_id" value
 * @method Event               setTitle()               Sets the current record's "title" value
 * @method Event               setDescription()         Sets the current record's "description" value
 * @method Event               setStartDate()           Sets the current record's "start_date" value
 * @method Event               setEndDate()             Sets the current record's "end_date" value
 * @method Event               setTimezone()            Sets the current record's "timezone" value
 * @method Event               setUrl()                 Sets the current record's "url" value
 * @method Event               setCapacity()            Sets the current record's "capacity" value
 * @method Event               setCreated()             Sets the current record's "created" value
 * @method Event               setEventbriteModified()  Sets the current record's "eventbrite_modified" value
 * @method Event               setPrivacy()             Sets the current record's "privacy" value
 * @method Event               setPassword()            Sets the current record's "password" value
 * @method Event               setLogo()                Sets the current record's "logo" value
 * @method Event               setLogoSsl()             Sets the current record's "logo_ssl" value
 * @method Event               setStatus()              Sets the current record's "status" value
 * @method Event               setModerated()           Sets the current record's "moderated" value
 * @method Event               setListingColor()        Sets the current record's "listing_color" value
 * @method Event               setTickets()             Sets the current record's "Tickets" collection
 * @method Event               setCategory()            Sets the current record's "Category" value
 * @method Event               setVenue()               Sets the current record's "Venue" value
 * @method Event               setOrganiser()           Sets the current record's "Organiser" value
 * @method Event               setAttendees()           Sets the current record's "Attendees" collection
 * 
 * @package    toaberlin
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseEvent extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('event');
        $this->hasColumn('category_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('eventbrite_id', 'integer', 12, array(
             'type' => 'integer',
             'length' => 12,
             ));
        $this->hasColumn('venue_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('organiser_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('title', 'string', 64, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 64,
             ));
        $this->hasColumn('description', 'string', 512, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 512,
             ));
        $this->hasColumn('start_date', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('end_date', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('timezone', 'string', 32, array(
             'type' => 'string',
             'length' => 32,
             ));
        $this->hasColumn('url', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('capacity', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('created', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('eventbrite_modified', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('privacy', 'string', 16, array(
             'type' => 'string',
             'length' => 16,
             ));
        $this->hasColumn('password', 'string', 160, array(
             'type' => 'string',
             'length' => 160,
             ));
        $this->hasColumn('logo', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('logo_ssl', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('status', 'string', 16, array(
             'type' => 'string',
             'length' => 16,
             ));
        $this->hasColumn('moderated', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('listing_color', 'string', 8, array(
             'type' => 'string',
             'length' => 8,
             ));

        $this->option('charset', 'UTF8');
        $this->option('type', 'innodb');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Ticket as Tickets', array(
             'refClass' => 'EventTicket',
             'local' => 'event_id',
             'foreign' => 'ticket_id'));

        $this->hasOne('Category', array(
             'local' => 'category_id',
             'foreign' => 'id'));

        $this->hasOne('Venue', array(
             'local' => 'venue_id',
             'foreign' => 'id'));

        $this->hasOne('Organiser', array(
             'local' => 'organiser_id',
             'foreign' => 'id'));

        $this->hasMany('Attendee as Attendees', array(
             'local' => 'id',
             'foreign' => 'event_id'));
    }
}